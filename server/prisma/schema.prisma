generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @db.VarChar(128)
  email             String            @default("") @db.VarChar(128)
  name              String            @default("") @db.VarChar(128)
  age               Int               @default(0) @db.Integer
  darkmode          Boolean           @default(false) @db.Boolean
  points            Int               @default(0) @db.Integer
  picture           String            @default("") @db.VarChar(128)
  location          String            @default("") @db.VarChar(10)
  bmr               Int               @default(0) @db.Integer
  signedAt          DateTime          @default(now())
  body              Body?
  comments          Comment[]
  cookedFood        Food[]
  favoriteFood      UserFavFood[]
  problems          UserHasProblem[]
  favoriteExercises UserFavExercise[]
  messages          Message[]
  products          Product[]
}

model UserHasProblem {
  id        Int     @id @default(autoincrement()) @db.Integer
  user      User    @relation(fields: [userID], references: [id])
  userID    String  @db.VarChar(128)
  problem   Problem @relation(fields: [problemID], references: [id])
  problemID Int     @db.Integer
}

model Body {
  user    User     @relation(fields: [userID], references: [id])
  userID  String   @id @db.VarChar(128)
  muscles Muscle[]
}

model Muscle {
  id          Int                 @id @default(autoincrement())
  name        MuscleEnum          @unique
  body        Body                @relation(fields: [bodyID], references: [userID])
  bodyID      String              @db.VarChar(128)
  problem     MuscleHasProblem[]
  exercise    MuscleForExercise[]
  condition   MuscleCondition     @default(GOOD)
  muscleGroup MuscleGroup
  joints      Joint[]
}

model Excercise {
  id             Int                 @id @default(autoincrement())
  type           ExcerciseType
  name           String              @unique @db.VarChar(30)
  difficulty     ExerciseDifficulty
  muscles        MuscleForExercise[]
  favoriteByUser UserFavExercise[]
  comments       Comment[]
  message        MessageExercise[]
  messageID      Int                 @db.Integer
}

model Problem {
  id           Int                @id @default(autoincrement()) @db.Integer
  name         String?            @default("") @db.VarChar(128)
  user         UserHasProblem[]
  muscleGroups MuscleGroup[]
  joints       Joint[]
  muscles      MuscleHasProblem[]
  comments     Comment[]
  createdAt    DateTime           @default(now())
  hidden       Boolean            @default(false)
}

model UserFavExercise {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userID], references: [id])
  userID     String    @db.VarChar(128)
  exercise   Excercise @relation(fields: [exerciseID], references: [id])
  exerciseID Int       @db.Integer
}

model MuscleForExercise {
  id          Int                 @id @default(autoincrement()) @db.Integer
  exercise    Excercise           @relation(fields: [exerciseID], references: [id])
  exerciseID  Int                 @db.Integer
  muscle      Muscle              @relation(fields: [muscleID], references: [id])
  muscleID    Int
  effectivity EffectivityOfMuscle @default(NONE)
}

model MuscleHasProblem {
  id        Int        @id @default(autoincrement())
  problem   Problem[]  @relation(fields: [problemID], references: [id])
  problemID Int        @db.Integer
  muscle    Muscle     @relation(fields: [muscleID], references: [id])
  muscleID  Int
  createdAt DateTime   @default(now())
  changedAt DateTime   @default(now())
}

model Message {
  id        Int               @id @default(autoincrement()) @db.Integer
  text      String            @default("") @db.VarChar(128)
  exercises MessageExercise[]
  food      MessageFood[]
  user      User              @relation(fields: [userID], references: [id])
  userID    String            @db.VarChar(128)
  createdAt DateTime          @default(now())
  editedAt  DateTime          @default(now())
  hidden    Boolean           @default(false)
}

model MessageExercise {
  id         Int       @id @default(autoincrement()) @db.Integer
  exercise   Excercise @relation(fields: [exerciseID], references: [id])
  exerciseID Int       @db.Integer
  message    Message   @relation(fields: [messageID], references: [id])
  messageID  Int       @db.Integer
}

model MessageFood {
  id        Int     @id @default(autoincrement()) @db.Integer
  message   Message @relation(fields: [messageID], references: [id])
  messageID Int     @db.Integer
  food      Food    @relation(fields: [foodID], references: [id])
  foodID    Int     @db.Integer
}

model Food {
  id          Int           @id @default(autoincrement()) @db.Integer
  name        String        @default("") @db.VarChar(30)
  proteins    Int           @default(0) @db.Integer
  carbs       Int           @default(0) @db.Integer
  fats        Int           @default(0) @db.Integer
  kcal        Int           @default(0) @db.Integer
  description String        @db.VarChar(128)
  photos      Photo[]
  ingredients String[]
  comments    Comment[]
  message     MessageFood[]
  cookedBy    User          @relation(fields: [cookedByID], references: [id])
  cookedByID  String        @db.VarChar(128)
  favoriteBy  UserFavFood[]
  createdAt   DateTime      @default(now())
  editedAt    DateTime      @default(now())
  hidden      Boolean       @default(false)
}

model UserFavFood {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userID], references: [id])
  userID String @db.VarChar(128)
  food   Food   @relation(fields: [foodID], references: [id])
  foodID Int    @db.Integer
}

model Photo {
  id     Int     @id @default(autoincrement()) @db.Integer
  url    String  @db.VarChar(128)
  food   Food    @relation(fields: [foodID], references: [id])
  foodID Int     @db.Integer
  hidden Boolean @default(false)
}

model Comment {
  id         Int         @id @default(autoincrement()) @db.Integer
  text       String      @db.VarChar(128)
  user       User        @relation(fields: [userID], references: [id])
  userID     String      @db.VarChar(128)
  food       Food?       @relation(fields: [foodID], references: [id])
  foodID     Int         @db.Integer
  exercise   Excercise?  @relation(fields: [exerciseID], references: [id])
  exerciseID Int         @db.Integer
  problem    Problem?    @relation(fields: [problemID], references: [id])
  problemID  Int
  likes      Int         @default(0) @db.Integer
  type       CommentType
  createdAt  DateTime    @default(now())
  editedAt   DateTime    @default(now())
  hidden     Boolean     @default(false)
}

model Product {
  id     Int    @id @default(autoincrement()) @db.Integer
  name   String @db.VarChar(20)
  price  Int    @default(0) @db.Integer
  user   User   @relation(fields: [userID], references: [id])
  userID String @db.VarChar(128)
}

enum EffectivityOfMuscle {
  NONE
  E1
  E2
  E3
}

enum ExerciseDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Joint {
  HEAD
  NECK
  SHOULDER_CENTER
  SHOULDER
  ELBOW
  WRIST
  FINGERS_HAND
  LOW_BACK
  COCCYGIS
  HIP
  KNEE
  ANKLE
  FINGERS_FOOT
}

enum MuscleCondition {
  WEAK
  GOOD
}

enum CommentType {
  EXERCISE
  FOOD
  PROBLEM
}

enum MuscleGroup {
  SCAPULA
  CHEST
  BELLY
}

enum Lopatka {
  SERRATUS_ANTERIOR
  RHOMBOID_MAJOR
  RHOMBOID_MINOR
}

enum ExcerciseType {
  STRETCH
  STRENGTH
  MASAGE
  ENDURANCE
  TEST
}

enum MuscleEnum {
  STERNOHYOID
  OMOHYOID
  STERNOCLEIDOMASTEOID
  SEMISPINALIS_CAPITIS
  SPLENIUS_CAPITIS
  LEVATOR_SCAPULAE
  SCALENES

  PECTORALIS_MAJOR
  PECTORALIS_MINOR
  SERRATUS_ANTERIOR

  SUPRASPINATUS
  INFRASPINATUS
  TERES_MAJOR
  TERES_MINOR
  SUBSCAPULARIS

  RHOMBOID_MINOR
  RHOMBOID_MAJOR
  SERRATUS_POSTERIOR
  LATISSIMUS_DORSI
  TRAPEZIUS

  DELTOID
  CORACOBRACHIALIS
  BICEPS_BRACHII_SHORT
  BICEPS_BRACHII_LONG

  TRICEPS_BRACHII

  BRACHIALIS
  PRONATOR_TERES
  FLEXOR_CARPI_RADIALIS
  FLEXOR_CARPI_ULNARIS
  PALMARIS_LONGUS
  ANCONEUS
  EXTENSOR_CARPI_RADIALIS_LONGUS
  EXTENSOR_CARPI_RADIALIS_BREVIS
  EXTENSOR_DIGITORUM
  EXTENSOR_POLICIS_LONGUS
  EXTENSOR_POLICIS_BREVIS

  RECTUS_ABDOMINIS
  TRANVERSUS_ABDOMINIS
  EXTERNAL_OBLIQUE
  INTERNAL_OBLIQUE

  PSOAS_MINOR
  PSOAS_MAJOR
  ILIACUS
  ILIOPSOAS
  SARTORIUS

  TENSOR_FASCIAE_LATAE
  RECTUS_FEMORIS
  VASTUS_LATERALIS
  VASTUS_MEDIALIS
  GRACILIS
  ADDUCTOR_LONGUS

  GLUTEUS_MAXIMUS
  GLUTEUS_MEDIUS
  GLUTEUS_MINIMUS
  PIRIFORMIS
  ADDUCTOR_MAGNUS
  BICEPS_FEMORIS
  SEMITENDINOSUS
  SEMIMEMBRANOSUS

  GASTROCNEMIUS
  POPLITERIUS
  PLANTARIS

  FIBULARIS_LONGUS
  TIBIALIS_ANTERIOR
  EXTENSOR_DIGITORUM_LONGUS
  ETENSOR_HALLUCIS_LONGUS
  SOLEUS
  FIBULARIS_TERTIUS
}
